% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/guri_make_journal.R
\name{guri_make_journal}
\alias{guri_make_journal}
\title{Create the basic file structure for a new journal}
\usage{
guri_make_journal(journal = NULL, issue_prefix = "num", example = FALSE)
}
\arguments{
\item{journal}{A string with the short name of the journal. This 'short name'
can contain only letters, numbers or a low dash (_) and must begin with a
letter. The journal name 'example' is not allowed.}

\item{issue_prefix}{A string. This prefix is used to identify the folders
where each issue of your journal will be stored. For example, if you use
'num' (default) the folders where you should store the issues of your
journal will be 'num1', 'num2', and so on.}

\item{example}{Logical. Do you want to create the journal provided as an
example? (Default = FALSE)}
}
\value{
Invisible returns the journal folder.
}
\description{
Create the basic file structure for a new journal.
}
\details{
Create the journal folder with configuration and template files. The
journal directory includes a folder with the files used to configure
the journal output (\verb{_config}) and a folder with the basic files you
will use for the production process (\code{default-files}). In addition,
the \verb{_journal.yaml} file will be generated, which you will have to
edit manually with the journal data.

If 'example = TRUE' a directory of the journal 'example' (\verb{.\\example}) is
created with the necessary file structure to generate the final output files.
}
\examples{
# Create a folder structure for a new journal.

new_journal_folder <- guri_make_journal(journal = "new_journal")

if(requireNamespace("fs", quietly = TRUE)) {
  fs::dir_tree("new_journal")
}else{
  list.files(new_journal_folder, recursive = TRUE, include.dirs = TRUE)
}

unlink("new_journal", recursive = TRUE)

# Create a folder structure for the 'example journal'.

guri_make_journal(example = TRUE)

if(requireNamespace("fs", quietly = TRUE)) {
  fs::dir_tree("example")
}else{
  head(list.files("example", recursive = TRUE, include.dirs = TRUE))
}

unlink("example/", recursive = TRUE)

}
