% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/guri_make_journal.R
\name{guri_make_journal}
\alias{guri_make_journal}
\title{Create the basic file structure for a new journal/journal repository}
\usage{
guri_make_journal(
  journal = NULL,
  repository = FALSE,
  config_options = FALSE,
  example = FALSE,
  force = FALSE
)
}
\arguments{
\item{journal}{A string with the short name of the journal. This 'short name'
can contain only letters, numbers or a low dash (_) and must begin with a
letter. Use only if you will work with the journal repository model (for
single journal use NULL, default value). The journal name 'example' is not
allowed.}

\item{repository}{Logical. Will it work with the journal repository model
(Default: \code{FALSE}). If \code{TRUE} is chosen, you must set a value for \code{journal}
(unless \code{example = TRUE}) and a separate folder will be created for each
journal. If \code{FALSE} the root folder will contain the files needed to manage
your journal.}

\item{config_options}{Options to generate the configuration files in
'_config'. If FALSE (default), configuration files are not generated in the
'_config' folder. If "default" or TRUE, the template and metadata files
used by default are copied to the '_config' folder (so that they can be
later modified to customise the journal). If it is a \emph{named list} with the
parameters from \link{guri_config_journal}, they will be passed to this function
(e.g. customized = list(csl_name = "chicago-author-date-16th-edition").}

\item{example}{Logical. Do you want to create the journal provided as an
example? (Default = FALSE)}

\item{force}{Logical. Should the journal be generated even if it already
exists in the folder? This will ignore the '.guri' file if present.
(Default: FALSE)}
}
\value{
Invisible returns the journal folder.
}
\description{
Create the basic file structure for a new journal or journal
repository (to manage multiple journals).
}
\details{
Create the journal folder (if repository \code{TRUE}). The journal
directory includes a configuration folder with the files used to configure
the journal output (\verb{_config}) and a folder with the basic files you will
use for the production process (\code{default-files}). In addition, the
\verb{_journal.yaml} file will be generated, which you will have to edit
manually with the basic journal data.

The folder structure can contain one journal (repository = TRUE) or
multiple journals (repository = TRUE). Journal repositories allow to manage
multiple journals in a single working environment. The internal structure
of the journals within a repository is identical to that of a single
journal.

The configuration file features (in \verb{_config}) can be defined with this
function during journal creation or independently using (see
\link{guri_config_journal}).

If 'example = TRUE' a directory of the journal 'example' (\verb{.\\example}) is
created with the necessary file structure to generate the final output
files.
}
\examples{
# Create a folder structure for a new journal.

guri_make_journal(journal = "new_journal", repository = TRUE)
fs::dir_tree("new_journal")

unlink("new_journal", recursive = TRUE)
unlink(".guri")

# Create a folder structure for the 'example journal'.

guri_make_journal(example = TRUE, repository = TRUE)
fs::dir_tree("example", type =  "directory")

unlink("example/", recursive = TRUE)
unlink(".guri")

}
